import _ from 'underscore';

export const elementShim = (elm, state) => {
    if (!elm || !state) return;

    const features = [
        'autofocus',
        'defaultChecked',
        'defaultValue',
        'disabled',
        'form',
        'indeterminate',
        'required',
        'type',
        'accessKey',
        'addEventListener',
        'appendChild',
        'attributes',
        'childElementCount',
        'childNodes',
        'children',
        'classList',
        'className',
        'click',
        'clientHeight',
        'clientLeft',
        'clientTop',
        'clientWidth',
        'cloneNode',
        'closest',
        'compareDocumentPosition',
        'contains',
        'contentEditable',
        'dir',
        'firstChild',
        'firstElementChild',
        'getAttribute',
        'getAttributeNode',
        'getBoundingClientRect',
        'getElementsByClassName',
        'getElementsByTagName',
        'hasAttribute',
        'hasAttributes',
        'hasChildNodes',
        'innerHTML',
        'innerText',
        'insertAdjacentElement',
        'insertAdjacentHTML',
        'insertAdjacentText',
        'inserBefore',
        'isContentEditable',
        'isDefaultNamespace',
        'isEqualNode',
        'isSameNode',
        'isSupported',
        'lang',
        'lastChild',
        'lastElementChild',
        'matches',
        'namespaceURI',
        'nextSibling',
        'nextElementSibling',
        'nodeName',
        'nodeValue',
        'normalize',
        'offsetHeight',
        'offsetWidth',
        'offsetLeft',
        'offsetParent',
        'offsetTop',
        'outerHTML',
        'outerText',
        'ownerDocument',
        'parentNode',
        'parentElement',
        'previousSibling',
        'previousElementSibling',
        'querySelector',
        'querySelectorAll',
        'remove',
        'removeAttribute',
        'removeAttributeNode',
        'removeChild',
        'removeEventListener',
        'replaceChild',
        'scrollHeight',
        'scrollIntoView',
        'scrollLeft',
        'scrollTop',
        'scrollWidth',
        'setAttribute',
        'setAttributeNode',
        'tabIndex',
        'textContent',
        'toString',
    ];

    features.forEach((feature) => {
        // if (!elm[feature]) return;
        state[feature] = elm[feature] || undefined;
    });

    return state;
};

export default elementShim;
